

2.1.2 Запускаем Pod
Создать pod
kubectl create -f pod.yaml
Посмотреть поды
kubectl get pods
Удалить pods 
kubectl delete pod --all

2.1.3 Самостоятельная работа
Запустите в кластере pod из образа busybox:latest c командой sh -c 'while true; do echo New random number is $(( ( RANDOM % 100 )  + 1 )); sleep 2; done'  и именем hello

---
# file: practice/2.application-abstractions/1.pod/pod-sam.yaml
apiVersion: v1
kind: Pod
metadata:
  name: hello
spec:
  containers:
  - image: busybox:latest
    name: hello
    command: ["/bin/sh"] 
    args: ["-c", "while true; do echo New random number is $(( ( RANDOM % 100 )  + 1 )); sleep 2; done"]
...


Посмотреть логи pod'а:
kubectl logs hello

Удалить конкретный pod:
kubectl delete pod hello




Replica set — это важная абстракция в Kubernetes, которая позволяет масштабировать поды внутри кластера.
Replica set фактически является шаблоном, который описывает темплейт для создания подов. В этом шаблоне можно указать количество подов, которые нужно создать.

В спецификации (spec) replica set содержится несколько важных полей:
replicas — указывает, сколько реплик (подов) нужно создать из данного шаблона. Например, если в поле указано значение 2, это означает, что необходимо запустить две реплики.
selector — включает поле matchLabels, где можно определить метки (лейблы), которые будут использоваться для выбора подов. Например, лейбл app-myapp.
Селектор matchLabels в replica set определяет, что replica set будет управлять всеми подами, у которых установлен лейбл app: my-app

Лейблы используются для структурирования и логической группировки объектов. Так, лейблы они могут применяться для обозначения уровней (tiers) таких как frontend, backend, database, или по именам приложений.

replica set следит за всеми подами, у которых лейбл app: my-app если в селекторе находится этот match label

показать все поды, у которых лейбл app равен my-app:
kubectl get pod -l app: my-app     // Это позволяет эффективно управлять объектами и выполнять выборку на основе меток.

Перед применением нового replica set рекомендуется удалить старые поды.

Применить(создать, запустить) replica set:
kubectl create -f replicaset.yml

сокращение:
replica set - rs

kubectl get rs будет работать так же, как и kubectl get replica set


Масштабирование replica set
Первый способ:
1) Обновить количество реплик в конфигурационном файле replica-set.yaml
2) kubectl apply -f replicaset.yaml
apply != create

Второй способ:
kubectl scale replicaset my-replicaset --replicas 3


Обновление версий приложений в Kubernetes
Первый способ:
1) внести изменеия в в файл replicaset.yaml
2) kubectl apply -f replicaset.yaml

Второй способ:
kubectl edit replicaset my-replicaset
Таким образом, изменения вносятся непосредственно в кластер в реальном времени, но применены они не будут, для применения нужно что бы под пересоздался.
При использовании команды edit изменения вносятся в удаленный объект в кластере и не сохраняются в локальном файле конфигурации, таком как replicaset.yaml

Третий способ:
kubectl set image replicaset my-replicaset nginx=nginx:1.21

поды не были обновлены автоматически, поскольку replica set предназначен для поддержания заданного количества реплик, но не для обновления уже существующих подов после изменения темплейта

Получение подробной информации о поде:
kubectl describe pod <podname>
Получение подробной информации о replicaset:
kubectl describe replicaset <replicasetName>

Можно сделать describe любого объекта в кластере Kubernetes. Эта команда предоставляет базовое описание объекта, включая информацию о полях и событиях (events), произошедших с объектом в кластере Kubernetes.

kubectl get pod <podname> -o=jsonpath='{.spec.containers[*].image}{"\n"}'
Ключ -o jsonpath позволяет получить не весь объект целиком, а только содержимое конкретных полей.
Он крайне полезен при написании скриптов для автоматизации задач в Kubernetes.














