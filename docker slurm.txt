docker run -i -t debian:jessie bash
Под капотом выполняет:
docker pull debian:jessie
docer create debian:jessie bash
docker start _containerID_

docker ps -a

docker run -d -p 8080:80 nginx:1.13
8080 локальны порт пробрасывается в
80 порт контейнера
curl -i localhost:8080

docker log _containerName_

docker exec _containerName_ cat /etc/nginx/conf.d/default.conf

docker rm -f _containerName_

docker run -d -p 8080:80 -v $PWD/default.conf:/etc/nginx/conf.d/default.conf nginx:1.13

-e или --env записывают переданные переменные среды в самой системе контейнера. Так же есть ключ --env-file - записывает в переменные окружения все данные из файла
docker run -e 'VARIABLE=value' nginx:1.12 

--link позволяет связать несколько контейнеров по сети, таким образом из одного контейнера можно будет обращаться в другой контейнер по dns и порту
--link docker:docker  

--name docker   задать имя контейнеру "docker"

--link db:db    --link name:alias. name — имя контейнера, alias — имя, под которым этот контейнер будет известен запускаемому

--privileged    привилегированный режим



docker build . -t myImage

docker images


Dockerfile 1:
FROM python:3.6
RUN ln -snf /usr/share/zoneinfo/Europe/Moscow /etc/localtime && echo Europe/Moscow > /etc/timezone

RUN apt-get update -y && apt-get install -y curl
RUN pip install django

ADD . /app
ENTRYPOINT python /app/manage.py runserver 0.0.0.0:8000 --noreload



! Процессы с программой лучше всего не запускать в фоне (background), а запускать в foreground
! Из образа полезно удалять кеши пакетного менеджера
! Важен порядок дериктив, при изменении одного слоя, все последующие будут пересобираться
Логи внутри контейнира лучше писать в stdout\stderr

Dockerfile 2:
EXPOSE 80          // По умолчанию контейнер будет открывать порт 80
ENTRYPOINT nginx -g 'daemon off;'    // запускать nginx в foreground

COPY vs ADD        // COPY просто копирует
                   // ADD коприрует, скачивает файлы по url, архивы распаковывает.
                   !! Рекомендуется использовать COPY

ENTRYPOINT vs CMD  // ENTRYPOINT команда выполняющаяся при старте контейнера (запуск приложения) *нельзя переопределить при запуске контейнера # предполагалось изначально
                   // CMD ключи и параметры для команды (ключи\параметры запуска приложения) *можно переопределить при запуске контейнера # предполагалось изначально
                   ENTRYPOINT имеет два режима выполнения:
                   ENTRYPOINT ["executable", "param1", "param2"] (исполняемая форма, предпочтительно)   # "exec" format 
                   ENTRYPOINT command param1 param2 (форма оболочки)    # "shell" format                           
                   Режим exec является рекомендуемым

Файл
.dockerignore:
.git



Dockerfile 3: (задание)
FROM python:3.11.3-buster

RUN set -ex && apt-get update -y && apt-get upgrade -y && apt-get clean
RUN mkdir /app && useradd -m app && chown app:app /app

USER app

COPY . /app

RUN cd /app && pip install -r requirements.txt

EXPOSE 8000

CMD python /app/app.py




Полезные параметры запуска docker daemon
--default-ulimit
--dns
--insecure-registry



Задание 2.12
docker run --name docker --privileged -e DOCKER_TLS_CERTDIR= -d docker:24.0.4-dind





3.1 Docker-compose


Пример docker-compose.yaml
---
version: '2.1'     //в примере специально используется устаревшая версия, в ней есть healthcheck и dependes_on

services:
  db:
    image: postgres:12.6
    command: -c fsync=off -c full_page_writes=off
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: test
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 1s
      timeout: 1s
      retries: 60
  web:
    image: ${CI_REGISTRY:-registry.slurm.io}/${CI_PROJECT_NAMESPACE:-slurm}/${CI_PROJECT_NAME:-demo}:${CI_COMMIT_REF_SLUG:-local}.${CI_PIPELINE_ID:-1}      //:-"значение по умолчанию", которое будет выполнено в случае отсутсвия заданной переменной
    environment:
      DB_NAME: test
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: db
    depends_on:
      db:
        condition: service_healthy


cd dir
docker-compose up
                   -d   //start containers in background

docker-compose down

  



